type: install
id: java-memory-usage-demo
name: Java Vertical Scaling
baseUrl: https://raw.githubusercontent.com/jelastic/java-vertical-scaling-test/jakartaee
homepage: https://github.com/jelastic/java-vertical-scaling-test
logo: /images/elastic-duke-70x70.png
description: |
  Java vertical scaling test: 
  * G1 
  * Shenandoah
  * ZGC @ Oracle OpenJDK
  * C4 @ Zing
  * OpenJ9  
  * Serial
  * CMS
  * Epsilon
  * Parallel

globals: 
  cloudlets: 26
  common: -Xmx3g -Xms32m -XX:+UseCompressedOops
nodes:
  - nodeType: javaengine
    tag: zulujdk-12.0.2
    nodeGroup: shenan
    cloudlets: ${globals.cloudlets}
    displayName: Shenandoah
    startService: false
    #-XX:ShenandoahGCHeuristics=compact is very agressive mode 
    env:
      _JAVA_OPTIONS: ${globals.common} -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=compact 
  - nodeType: javaengine
    tag: openjdk-13.ea-b31
    nodeGroup: zgc
    cloudlets: ${globals.cloudlets}
    displayName: ZGC @ Oracle OpenJDK
    startService: false
    #-XX:ZUncommitDelay=1 -XX:ZCollectionInterval=30 is very agressive mode as well, similar to Shenandoah
    env:
      _JAVA_OPTIONS: ${globals.common} -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:ZUncommitDelay=1 -XX:ZCollectionInterval=30
      
  - nodeType: javaengine
    tag: zulujdk-12.0.2
    nodeGroup: g1
    cloudlets: ${globals.cloudlets}
    displayName: G1
    startService: false
    env:
      _JAVA_OPTIONS: ${globals.common} -XX:+UseG1GC -XX:G1PeriodicGCInterval=1k

  - nodeType: javaengine
    tag: zulujdk-12.0.2
    nodeGroup: epsilon
    cloudlets: ${globals.cloudlets}
    displayName: Epsilon
    startService: false
    env:
      _JAVA_OPTIONS: ${globals.common} -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC

  - nodeType: javaengine
    tag: openj9-0.15.1-12.0.2
    nodeGroup: openj9
    cloudlets: ${globals.cloudlets}
    displayName: OpenJ9
    startService: false
    env:
      OPENJ9_JAVA_OPTIONS: ${globals.common} -XX:+IdleTuningCompactOnIdle -XX:+IdleTuningGcOnIdle -XX:IdleTuningMinIdleWaitTime=1 -Xjit:waitTimeToEnterDeepIdleMode=1000

  - image: devbeta/javaengine:zing-11.0.0
    nodeGroup: zing
    cloudlets: ${globals.cloudlets}
    displayName: C4 @ Zing 
    startService: false
    env:
      _JAVA_OPTIONS: -Xmx500m -Xms32m -XX:+UseCompressedOops -XX:+UseZST
      
  - nodeType: javaengine
    tag: zulujdk-12.0.2
    nodeGroup: cms
    cloudlets: ${globals.cloudlets}
    displayName: ConcMarkSweep
    startService: false
    env:
      _JAVA_OPTIONS: ${globals.common} -XX:+UseConcMarkSweepGC

  - nodeType: javaengine
    tag: zulujdk-12.0.2
    nodeGroup: parallel
    cloudlets: ${globals.cloudlets}
    displayName: Parallel
    startService: false
    env:
      _JAVA_OPTIONS: ${globals.common} -XX:+UseParallelGC

  - nodeType: javaengine
    tag: zulujdk-12.0.2
    nodeGroup: serial
    cloudlets: ${globals.cloudlets}
    displayName: Serial
    startService: false
    env:
      _JAVA_OPTIONS: ${globals.common} -XX:+UseSerialGC


onInstall:
  - cmd[*]: |-
      chmod 775 /var/run/screen
      chmod 777 /var/log/run.log
      java --uninstall
    user: root
  - cmd[*]: |-
      wget https://github.com/jelastic/java-vertical-scaling-test/raw/master/dist/app.jar
      screen -dm bash -c "echo -ne '\n' | java -jar app.jar 100 2 &>> /var/log/run.log"
  - cmd[shenan, g1, zing, serial, cms, parallel, epsilon]: |-
      screen -dm bash -c 'sleep 300; while true; do a="app"; j=".jar"; /usr/java/latest/bin/jcmd $(pgrep -f $a$j | tail -n1) GC.run &>> /var/log/run.log; sleep 20; done;'  

#  OpenJ9 memory usage should be tracked in a tricky way 
#  while true; do used=$(ps -orss --no-headers --pid $(pgrep -f java | tail -n1)); echo "scale=2 ; $used / 1024*1024" | bc; sleep 1; done
